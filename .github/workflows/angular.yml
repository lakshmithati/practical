
name: practical

on:
  push:
    branches:
      - main


jobs:
  
  build_job:
    name: build
    runs-on: ubuntu-20.04
    strategy:
      matrix: 
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
        with:
            node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run build --if-present
      - run: ls -al dist
      - name: Zip the buid/dist file
        run: zip dist.zip ./dist -r
      - name: Upload Build to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist.zip
          retention-days: 1

  deploy_job:
    name: deploy
    needs: build_job
    runs-on: ubuntu-20.04
    steps:
    - name: install ssh keys in image vm (- runs-on)
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_IP }} > ~/.ssh/known_hosts
    - name: Download Build artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: build
    - name: list files in build file
      run: ls -al
    - name: Unzip the downloaded build file
      run: unzip dist.zip
    - name: list files in build file
      run: ls -al
    - uses: shimataro/ssh-key-action@v2
      with:
          key: ${{ secrets.SSH_KEY }}
          if_key_exists: ignore
          name: id_rsa
          known_hosts: ${{ secrets.VM_IP }}
    - name: Run setup script
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
    - name: List directory contents
      run: ls "C:/Users/Tati Ramesh/OneDrive/Desktop/projects ci-cd/testing/angular/practical"
    - name: Execute Docker command
      run: |
       cd "C:/Users/Tati Ramesh/OneDrive/Desktop/projects ci-cd/testing/angular/practical"
       /usr/bin/docker run --name ed866ead3c1789fd204a278226df0f53fec62e_825cd3 --label ed866e --workdir /github/workspace --rm -e "INPUT_HOST" -e "INPUT_USERNAME" -e "INPUT_KEY" -e "INPUT_SCRIPT" -e "INPUT_PORT" -e "INPUT_PASSPHRASE" -e "INPUT_PASSWORD" -e "INPUT_SYNC" -e "INPUT_USE_INSECURE_CIPHER" -e "INPUT_CIPHER" -e "INPUT_TIMEOUT" -e "INPUT_COMMAND_TIMEOUT" -e "INPUT_KEY_PATH" -e "INPUT_FINGERPRINT" -e "INPUT_PROXY_HOST" -e "INPUT_PROXY_PORT" -e "INPUT_PROXY_USERNAME" -e "INPUT_PROXY_PASSWORD" -e "INPUT_PROXY_PASSPHRASE" -e "INPUT_PROXY_TIMEOUT" -e "INPUT_PROXY_KEY" -e "INPUT_PROXY_KEY_PATH" -e "INPUT_PROXY_FINGERPRINT" -e "INPUT_PROXY_CIPHER" -e "INPUT_PROXY_USE_INSECURE_CIPHER" -e "INPUT_SCRIPT_STOP" -e "INPUT_ENVS" -e "INPUT_ENVS_FORMAT" -e "INPUT_DEBUG" -e "HOME" -e "GITHUB_JOB" -e "GITHUB_REF" -e "GITHUB_SHA" -e "GITHUB_REPOSITORY" -e "GITHUB_REPOSITORY_OWNER" -e "GITHUB_REPOSITORY_OWNER_ID" -e "GITHUB_RUN_ID" -e "GITHUB_RUN_NUMBER" -e "GITHUB_RETENTION_DAYS" -e "GITHUB_RUN_ATTEMPT" -e "GITHUB_REPOSITORY_ID" -e "GITHUB_ACTOR_ID" -e "GITHUB_ACTOR" -e "GITHUB_TRIGGERING_ACTOR" -e "GITHUB_WORKFLOW" -e "GITHUB_HEAD_REF" -e "GITHUB_BASE_REF" -e "GITHUB_EVENT_NAME" -e "GITHUB_SERVER_URL" -e "GITHUB_API_URL" -e "GITHUB_GRAPHQL_URL" -e "GITHUB_REF_NAME" -e "GITHUB_REF_PROTECTED" -e "GITHUB_REF_TYPE" -e "GITHUB_WORKFLOW_REF" -e "GITHUB_WORKFLOW_SHA" -e "GITHUB_WORKSPACE" -e "GITHUB_ACTION" -e "GITHUB_EVENT_PATH" -e "GITHUB_ACTION_REPOSITORY" -e "GITHUB_ACTION_REF" -e "GITHUB_PATH" -e "GITHUB_ENV" -e "GITHUB_STEP_SUMMARY" -e "GITHUB_STATE" -e "GITHUB_OUTPUT" -e "RUNNER_OS" -e "RUNNER_ARCH" -e "RUNNER_NAME" -e "RUNNER_TOOL_CACHE" -e "RUNNER_TEMP" -e "RUNNER_WORKSPACE" -e "ACTIONS_RUNTIME_URL" -e "ACTIONS_RUNTIME_TOKEN" -e "ACTIONS
    - name: cleanup ssh keys in image vm (- runs-on)
      run: rm -rf ~/.ssh
